// Generated by gencpp from file robot_msgs/HeadRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_HEADREQUEST_H
#define ROBOT_MSGS_MESSAGE_HEADREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct HeadRequest_
{
  typedef HeadRequest_<ContainerAllocator> Type;

  HeadRequest_()
    : id(0)
    , type(0)
    , x(0)
    , y(0)  {
    }
  HeadRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , type(0)
    , x(0)
    , y(0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint32_t _x_type;
  _x_type x;

   typedef uint32_t _y_type;
  _y_type y;




  typedef boost::shared_ptr< ::robot_msgs::HeadRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::HeadRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HeadRequest_

typedef ::robot_msgs::HeadRequest_<std::allocator<void> > HeadRequest;

typedef boost::shared_ptr< ::robot_msgs::HeadRequest > HeadRequestPtr;
typedef boost::shared_ptr< ::robot_msgs::HeadRequest const> HeadRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::HeadRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::HeadRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'robot_msgs': ['/home/renxl/share/catkin_ws/src/ihome/robot_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::HeadRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::HeadRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::HeadRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::HeadRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::HeadRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::HeadRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::HeadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17b1bb467408eb713382c27ffe841f1a";
  }

  static const char* value(const ::robot_msgs::HeadRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17b1bb467408eb71ULL;
  static const uint64_t static_value2 = 0x3382c27ffe841f1aULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::HeadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/HeadRequest";
  }

  static const char* value(const ::robot_msgs::HeadRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::HeadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n\
uint8 type\n\
uint32 x\n\
uint32 y\n\
";
  }

  static const char* value(const ::robot_msgs::HeadRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::HeadRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeadRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::HeadRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::HeadRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_HEADREQUEST_H
